import React, { useState, useEffect } from 'react';
import Layout from '../components/layout/Layout';
import SeriesCardGrid from '../components/ui/SeriesCardGrid';
import { getAllSeries, SeriesInfo } from '../utils/seriesUtils';
import { filterSeriesByLanguage } from '../utils/seriesAvailabilityUtils';
import { Search, Users, Globe, BookOpen, GridIcon, ListIcon, X, AlertCircle } from 'lucide-react';
import { useSearchParams } from 'react-router-dom';
import { LocalizedLink } from '../components/shared/LocalizedLink';
import { useTranslation } from 'react-i18next';
import { useLanguage } from '../i18n/LanguageContext';

export default function SeriesPage() {
  const { t } = useTranslation(['series-page', 'series-collections']);
  const { language } = useLanguage();
  const [searchParams, setSearchParams] = useSearchParams();
  const [viewMode, setViewMode] = useState<'grid' | 'structured'>('structured');
  const [searchQuery, setSearchQuery] = useState('');
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const [showUnavailableNotice, setShowUnavailableNotice] = useState(false);
  const [unavailableSeries, setUnavailableSeries] = useState<string | null>(null);
  
  // Check for unavailable series parameter
  useEffect(() => {
    const unavailableParam = searchParams.get('unavailable');
    if (unavailableParam) {
      setUnavailableSeries(unavailableParam);
      setShowUnavailableNotice(true);
      // Clean up the URL by removing the parameter
      const newSearchParams = new URLSearchParams(searchParams);
      newSearchParams.delete('unavailable');
      setSearchParams(newSearchParams, { replace: true });
    }
  }, [searchParams, setSearchParams]);

  const dismissUnavailableNotice = () => {
    setShowUnavailableNotice(false);
    setUnavailableSeries(null);
  };

  // Get all series and filter by language availability
  const allSeriesData = getAllSeries();
  const languageFilteredSeries = filterSeriesByLanguage(allSeriesData, language);
  
  // Apply translations to each series within the component
  const allSeries = languageFilteredSeries.map((series: SeriesInfo) => {
    // Get translations directly in the component
    const translatedTitle = t(`series-collections:series.${series.id}.title`, { defaultValue: series.title });
    const translatedDescription = t(`series-collections:series.${series.id}.description`, { defaultValue: series.description });
    const translatedLogline = t(`series-collections:series.${series.id}.logline`, { defaultValue: series.logline });
    
    return {
      ...series,
      title: translatedTitle || series.title,
      description: translatedDescription || series.description,
      logline: translatedLogline || series.logline
    };
  });
  
  // Count series by category (language-aware filtering already done by getAllSeries)
  const jesusSeriesCount = allSeries.filter((s: SeriesInfo) => s.category === 'jesus-focused').length;
  const cosmicSeriesCount = allSeries.filter((s: SeriesInfo) => s.category === 'parts-i-iii').length;
  
  // Filter series based on search and category
  const filteredSeries = allSeries.filter((series: SeriesInfo) => {
    // Filter by category if selected
    if (activeCategory && activeCategory !== 'all') {
      if (activeCategory === 'jesus' && series.category !== 'jesus-focused') return false;
      if (activeCategory === 'cosmic' && series.category !== 'parts-i-iii') return false;
    }
    
    // Filter by search query if any
    if (searchQuery) {
      return series.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
             series.description.toLowerCase().includes(searchQuery.toLowerCase());
    }
    
    return true;
  });
  
  // Group by category for structured view
  const jesusSeries = filteredSeries.filter((s: SeriesInfo) => s.category === 'jesus-focused');
  const cosmicSeries = filteredSeries.filter((s: SeriesInfo) => s.category === 'parts-i-iii');
  
  // Featured series - first from each category
  const featuredSeries = [
    allSeries.find((s: SeriesInfo) => s.category === 'jesus-focused'),
    allSeries.find((s: SeriesInfo) => s.category === 'parts-i-iii')
  ].filter(Boolean) as SeriesInfo[];

  return (
    <Layout>
      <main className="min-h-screen bg-navy-dark">
        {/* Unavailable Series Notification */}
        {showUnavailableNotice && unavailableSeries && (
          <div className="bg-amber-600/90 border-b border-amber-500/30 px-4 py-3">
            <div className="container mx-auto">
              <div className="flex items-center justify-between max-w-4xl mx-auto">
                <div className="flex items-center gap-3">
                  <AlertCircle className="h-5 w-5 text-white flex-shrink-0" />
                  <div className="text-white">
                    <span className="font-medium">
                      {t('unavailableNotice.title')}
                    </span>
                    <span className="ml-1">
                      {t('unavailableNotice.message', { seriesId: unavailableSeries, language: language === 'es' ? 'espa√±ol' : 'English' })}
                    </span>
                  </div>
                </div>
                <button
                  onClick={dismissUnavailableNotice}
                  className="text-white/80 hover:text-white p-1 ml-4 flex-shrink-0"
                  aria-label={t('unavailableNotice.dismiss')}
                >
                  <X className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>
        )}
        
        {/* Enhanced Hero Section with Value Proposition */}
        <section className="bg-navy-dark pt-24 pb-8">
          <div className="container mx-auto px-4">
            <div className="max-w-3xl mx-auto text-center mb-8">
              <h1 className="title-main text-4xl md:text-5xl lg:text-6xl mb-4 text-white">
                {t('hero.title')}
              </h1>
              <p className="section-subtitle text-xl text-white/90 max-w-2xl mx-auto mb-4">
                {t('hero.subtitle', { count: allSeries.length })}
              </p>
              <p className="text-lg text-white/80 max-w-2xl mx-auto">
                {t('hero.description')}
              </p>
            </div>
          </div>
        </section>
        
        {/* Featured Series - Enhanced Start Here Section */}
        <section className="pb-8">
          <div className="container mx-auto px-4">
            <div className="max-w-3xl mx-auto mb-8">
              <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-white mb-3">{t('featured.title')}</h2>
                <p className="text-white/70 max-w-xl mx-auto">
                  {t('featured.description')}
                </p>
              </div>
              
              <div className="grid md:grid-cols-2 gap-6">
                {featuredSeries.map(series => (
                  <LocalizedLink 
                    key={series.id}
                    to={`/series/${series.id}`} 
                    className="block bg-navy-light/30 rounded-xl overflow-hidden border border-white/10 transition-all hover:scale-[1.02] hover:border-primary/30"
                  >
                    <div className="p-6">
                      <div className="bg-primary/70 text-white text-xs px-2 py-1 rounded inline-block mb-3">
                        {t('featured.badge')}
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">{series.title}</h3>
                      <p className="text-white/70 text-sm mb-3 line-clamp-2">{series.description}</p>
                      <div className="flex justify-between items-center">
                        <span className="text-white/50 text-xs">{t('featured.episodeInfo')}</span>
                        <span className="text-primary text-sm">{t('featured.startJourney')}</span>
                      </div>
                    </div>
                  </LocalizedLink>
                ))}
              </div>
            </div>
          </div>
        </section>
        
        {/* Main Content Section with integrated controls */}
        <section className="pb-20">
          <div className="container mx-auto px-4">
            <div className="w-full max-w-4xl mx-auto px-0 sm:px-4">
              {/* Section Heading */}
              <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-white mb-2">{t('explore.title')}</h2>
                <p className="text-white/70 max-w-xl mx-auto px-4 sm:px-0">
                  {t('explore.description')}
                </p>
              </div>
            
              {/* Content Controls - Directly above the content they affect */}
              <div className="bg-navy-light/20 rounded-t-xl border-t border-x border-white/10 p-4 sm:p-5">
                <div className="flex flex-col sm:flex-row gap-3 sm:gap-4 items-start sm:items-center justify-between">
                  {/* Category Pills - Desktop */}
                  <div className="hidden sm:flex gap-2 flex-wrap w-auto">
                    <button
                      className={`px-3 py-2 rounded-md text-sm ${activeCategory === null ? 'bg-primary text-white' : 'bg-navy-light/30 text-white/70 hover:bg-navy-light/50'}`}
                      onClick={() => setActiveCategory(null)}
                    >
                      {t('filters.allSeries', { count: allSeries.length })}
                    </button>
                    {jesusSeriesCount > 0 && (
                      <button
                        className={`flex items-center px-3 py-2 rounded-md text-sm ${activeCategory === 'jesus' ? 'bg-primary text-white' : 'bg-navy-light/30 text-white/70 hover:bg-navy-light/50'}`}
                        onClick={() => setActiveCategory(activeCategory === 'jesus' ? null : 'jesus')}
                      >
                        <Users className="w-3.5 h-3.5 mr-1.5" />
                        {t('filters.jesusSeries', { count: jesusSeriesCount })}
                      </button>
                    )}
                    <button
                      className={`flex items-center px-3 py-2 rounded-md text-sm ${activeCategory === 'cosmic' ? 'bg-primary text-white' : 'bg-navy-light/30 text-white/70 hover:bg-navy-light/50'}`}
                      onClick={() => setActiveCategory(activeCategory === 'cosmic' ? null : 'cosmic')}
                    >
                      <Globe className="w-3.5 h-3.5 mr-1.5" />
                      {t('filters.cosmicSeries', { count: cosmicSeriesCount })}
                    </button>
                  </div>
                  
                  {/* Mobile Controls Container */}
                  <div className="flex sm:hidden gap-2 w-full">
                    {/* Category Dropdown - Mobile */}
                    <div className="flex-grow">
                      <select
                        className="w-full px-3 py-1.5 bg-navy-light/30 border border-white/10 rounded-md text-white text-sm focus:outline-none focus:ring-2 focus:ring-primary/50"
                        value={activeCategory === 'jesus' ? 'jesus' : activeCategory === 'cosmic' ? 'cosmic' : 'all'}
                        onChange={(e) => {
                          const value = e.target.value;
                          if (value === 'all') setActiveCategory(null);
                          else setActiveCategory(value);
                        }}
                        aria-label={t('filters.filterByCategory')}
                      >
                        <option value="all">{t('filters.allSeries', { count: allSeries.length })}</option>
                        {jesusSeriesCount > 0 && <option value="jesus">{t('filters.jesusSeries', { count: jesusSeriesCount })}</option>}
                        <option value="cosmic">{t('filters.cosmicSeries', { count: cosmicSeriesCount })}</option>
                      </select>
                    </div>
                    
                    {/* View Toggle - Mobile */}
                    <div className="flex gap-1">
                      <button
                        className={`p-1.5 rounded ${viewMode === 'structured' ? 'bg-primary text-white' : 'bg-navy-light/30 text-white/70'}`}
                        onClick={() => setViewMode('structured')}
                        aria-label={t('filters.structuredView')}
                        title={t('filters.structuredView')}
                      >
                        <ListIcon size={18} />
                      </button>
                      <button
                        className={`p-1.5 rounded ${viewMode === 'grid' ? 'bg-primary text-white' : 'bg-navy-light/30 text-white/70'}`}
                        onClick={() => setViewMode('grid')}
                        aria-label={t('filters.gridView')}
                        title={t('filters.gridView')}
                      >
                        <GridIcon size={18} />
                      </button>
                    </div>
                  </div>
                  
                  {/* View Toggle - Desktop */}
                  <div className="hidden sm:flex gap-2 self-auto">
                    <button
                      className={`p-2 rounded ${viewMode === 'structured' ? 'bg-primary text-white' : 'bg-navy-light/30 text-white/70'}`}
                      onClick={() => setViewMode('structured')}
                      aria-label={t('filters.structuredView')}
                      title={t('filters.structuredView')}
                    >
                      <ListIcon size={20} />
                    </button>
                    <button
                      className={`p-2 rounded ${viewMode === 'grid' ? 'bg-primary text-white' : 'bg-navy-light/30 text-white/70'}`}
                      onClick={() => setViewMode('grid')}
                      aria-label={t('filters.gridView')}
                      title={t('filters.gridView')}
                    >
                      <GridIcon size={20} />
                    </button>
                  </div>
                </div>
                
                {/* Search - Right above results */}
                <div className="mt-3 sm:mt-4">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50" size={16} />
                    <input
                      type="text"
                      placeholder={t('filters.searchPlaceholder')}
                      className="w-full py-1.5 sm:py-3 pl-9 pr-4 bg-navy-light/30 border border-white/10 rounded-md text-white placeholder:text-white/50 text-sm focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-transparent"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      aria-label={t('filters.searchPlaceholder')}
                    />
                    {searchQuery && (
                      <button
                        onClick={() => setSearchQuery('')}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-white/50 hover:text-white/70"
                        aria-label={t('filters.clearSearch')}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    )}
                  </div>
                  {searchQuery && (
                    <div className="mt-2 text-sm text-white/70">
                      {t('filters.searchResults', { count: filteredSeries.length, query: searchQuery })}
                    </div>
                  )}
                </div>
              </div>
              
              {/* Series Content */}
              <div className="bg-navy-dark border-x border-b border-white/10 rounded-b-xl p-4 sm:p-5">
                {filteredSeries.length === 0 ? (
                  <div className="text-center py-12">
                    <p className="text-white/70">{t('noResults.message')}</p>
                    <button 
                      className="mt-4 text-primary hover:text-primary-light"
                      onClick={() => {setSearchQuery(''); setActiveCategory(null);}}
                    >
                      {t('noResults.clearFilters')}
                    </button>
                  </div>
                ) : viewMode === 'grid' ? (
                  <div className="space-y-8">
                    {jesusSeries.length > 0 && (
                      <div>
                        <div className="flex items-center mb-4">
                          <Users className="w-5 h-5 text-rose-400/70 mr-2" />
                          <h2 className="text-xl font-bold text-rose-400">{t('categories.jesusTitle')}</h2>
                        </div>
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4">
                          {jesusSeries.map((series: SeriesInfo) => (
                            <LocalizedLink 
                              key={series.id}
                              to={`/series/${series.id}`}
                              className="block bg-navy-light/20 rounded-lg overflow-hidden border border-white/10 transition-all hover:scale-[1.02] hover:border-primary/30 hover:shadow-lg"
                            >
                              <div className="p-4 sm:p-5">
                                <div className="flex flex-wrap items-center gap-2 mb-3">
                                  <span className={`text-xs px-2 py-0.5 rounded-full ${series.category === 'jesus-focused' ? 'bg-rose-400/20 text-rose-400' : 'bg-blue-400/20 text-blue-400'}`}>
                                    {series.category === 'jesus-focused' ? t('seriesCard.jesusLabel') : t('seriesCard.cosmicLabel')}
                                  </span>
                                  <span className="text-white/30 text-xs">‚Ä¢</span>
                                  <span className="text-white/50 text-xs">{t('seriesCard.episodes')}</span>
                                </div>
                                <h3 className="text-lg font-bold text-white mb-2 line-clamp-2">{series.title}</h3>
                                <p className="text-white/70 text-sm mb-3 line-clamp-2">{series.description}</p>
                                <div className="flex items-center justify-end">
                                  <span className="text-primary text-sm font-medium group-hover:underline">{t('seriesCard.viewDetails')}</span>
                                </div>
                              </div>
                            </Link>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {cosmicSeries.length > 0 && (
                      <div>
                        <div className="flex items-center mb-4">
                          <Globe className="w-5 h-5 text-blue-400/70 mr-2" />
                          <h2 className="text-xl font-bold text-blue-400">{t('categories.cosmicTitle')}</h2>
                        </div>
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4">
                          {cosmicSeries.map((series: SeriesInfo) => (
                            <Link 
                              key={series.id}
                              to={`/series/${series.id}`}
                              className="block bg-navy-light/20 rounded-lg overflow-hidden border border-white/10 transition-all hover:scale-[1.02] hover:border-primary/30 hover:shadow-lg"
                            >
                              <div className="p-4 sm:p-5">
                                <div className="flex flex-wrap items-center gap-2 mb-3">
                                  <span className={`text-xs px-2 py-0.5 rounded-full ${series.category === 'jesus-focused' ? 'bg-rose-400/20 text-rose-400' : 'bg-blue-400/20 text-blue-400'}`}>
                                    {series.category === 'jesus-focused' ? t('seriesCard.jesusLabel') : t('seriesCard.cosmicLabel')}
                                  </span>
                                  <span className="text-white/30 text-xs">‚Ä¢</span>
                                  <span className="text-white/50 text-xs">{t('seriesCard.episodes')}</span>
                                </div>
                                <h3 className="text-lg font-bold text-white mb-2 line-clamp-2">{series.title}</h3>
                                <p className="text-white/70 text-sm mb-3 line-clamp-2">{series.description}</p>
                                <div className="flex items-center justify-end">
                                  <span className="text-primary text-sm font-medium group-hover:underline">{t('seriesCard.viewDetails')}</span>
                                </div>
                              </div>
                            </Link>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-8">
                    {jesusSeries.length > 0 && (
                      <div>
                        <div className="flex items-center mb-4">
                          <Users className="w-5 h-5 text-rose-400/70 mr-2" />
                          <h2 className="text-xl font-bold text-rose-400">{t('categories.jesusTitle')}</h2>
                        </div>
                        <div className="grid sm:grid-cols-2 gap-4">
                          {jesusSeries.map((series: SeriesInfo) => (
                            <Link 
                              key={series.id}
                              to={`/series/${series.id}`}
                              className="block bg-navy-light/20 rounded-lg overflow-hidden border border-white/10 transition-all hover:scale-[1.02] hover:border-primary/30 hover:shadow-lg"
                            >
                              <div className="p-4 sm:p-5">
                                <div className="flex flex-wrap items-center gap-2 mb-3">
                                  <span className={`text-xs px-2 py-0.5 rounded-full ${series.category === 'jesus-focused' ? 'bg-rose-400/20 text-rose-400' : 'bg-blue-400/20 text-blue-400'}`}>
                                    {series.category === 'jesus-focused' ? t('seriesCard.jesusLabel') : t('seriesCard.cosmicLabel')}
                                  </span>
                                  <span className="text-white/30 text-xs">‚Ä¢</span>
                                  <span className="text-white/50 text-xs">{t('seriesCard.episodes')}</span>
                                </div>
                                <h3 className="text-lg font-bold text-white mb-2 line-clamp-2">{series.title}</h3>
                                <p className="text-white/70 text-sm mb-3 line-clamp-2">{series.description}</p>
                                <div className="flex items-center justify-end">
                                  <span className="text-primary text-sm font-medium group-hover:underline">{t('seriesCard.viewDetails')}</span>
                                </div>
                              </div>
                            </Link>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {cosmicSeries.length > 0 && (
                      <div>
                        <div className="flex items-center mb-4">
                          <Globe className="w-5 h-5 text-blue-400/70 mr-2" />
                          <h2 className="text-xl font-bold text-blue-400">{t('categories.cosmicTitle')}</h2>
                        </div>
                        <div className="grid sm:grid-cols-2 gap-4">
                          {cosmicSeries.map((series: SeriesInfo) => (
                            <Link 
                              key={series.id}
                              to={`/series/${series.id}`}
                              className="block bg-navy-light/20 rounded-lg overflow-hidden border border-white/10 transition-all hover:scale-[1.02] hover:border-primary/30 hover:shadow-lg"
                            >
                              <div className="p-4 sm:p-5">
                                <div className="flex flex-wrap items-center gap-2 mb-3">
                                  <span className={`text-xs px-2 py-0.5 rounded-full ${series.category === 'jesus-focused' ? 'bg-rose-400/20 text-rose-400' : 'bg-blue-400/20 text-blue-400'}`}>
                                    {series.category === 'jesus-focused' ? t('seriesCard.jesusLabel') : t('seriesCard.cosmicLabel')}
                                  </span>
                                  <span className="text-white/30 text-xs">‚Ä¢</span>
                                  <span className="text-white/50 text-xs">{t('seriesCard.episodes')}</span>
                                </div>
                                <h3 className="text-lg font-bold text-white mb-2 line-clamp-2">{series.title}</h3>
                                <p className="text-white/70 text-sm mb-3 line-clamp-2">{series.description}</p>
                                <div className="flex items-center justify-end">
                                  <span className="text-primary text-sm font-medium group-hover:underline">{t('seriesCard.viewDetails')}</span>
                                </div>
                              </div>
                            </Link>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </section>
      </main>
    </Layout>
  );
} 